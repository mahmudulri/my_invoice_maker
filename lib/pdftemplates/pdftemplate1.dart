import 'dart:io';
import 'package:flutter/services.dart';
import 'package:invoice_maker/controllers/new_items_controller.dart';
import 'package:open_file/open_file.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;

class PdfTemplate1 {
  Future<Uint8List> generatePDF() async {
    final pdf = pw.Document();
    List<pw.Widget> widgets = [];
    final logo =
        (await rootBundle.load("assets/icons/logo.png")).buffer.asUint8List();

    final headerarea = pw.Container(
      height: 80,
      color: PdfColors.red,
      child: pw.Row(
        children: [
          // pw.Image(pw.MemoryImage(logo), height: 60),
          pw.Padding(
            padding: pw.EdgeInsets.all(10.0),
            child: pw.Column(
              mainAxisAlignment: pw.MainAxisAlignment.start,
              children: [
                pw.Text("Generated by Hasan"),
                pw.Text("Mega Invoice Maker"),
              ],
            ),
          ),
        ],
      ),
    );
    final totaprice = pw.Container(
      height: 80,
      color: PdfColors.grey.shade(0.20),
      child: pw.Row(
        children: [
          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.center,
            crossAxisAlignment: pw.CrossAxisAlignment.end,
            children: [
              pw.Text("Total"),
            ],
          ),
        ],
      ),
    );
    final footerarea = pw.Container(
      height: 5,
      color: PdfColors.grey.shade(0.20),
      child: pw.Row(
        children: [],
      ),
    );
    final gap15 = pw.SizedBox(height: 15);
    final gap100 = pw.SizedBox(height: 100);
    final fullgap = pw.Expanded(
      flex: 1,
      fit: pw.FlexFit.tight,
      child: pw.Container(),
    );

    widgets.add(headerarea);
    widgets.add(gap15);
    widgets.add(table());
    widgets.add(gap100);
    widgets.add(totalprice());

    widgets.add(fullgap);
    widgets.add(footerarea);
    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        margin: pw.EdgeInsets.symmetric(
          horizontal: 25,
          vertical: 20,
        ), // <<< REMOVE ALL MARGIN
        build: (pw.Context context) {
          return widgets;
        },
      ),
    );

    return pdf.save();
  }

  pw.Table totalprice() {
    return pw.Table(
      columnWidths: <int, pw.TableColumnWidth>{
        0: pw.FixedColumnWidth(80),
        1: pw.FixedColumnWidth(80),
        2: pw.FixedColumnWidth(80),
        3: pw.FixedColumnWidth(60),
        4: pw.FixedColumnWidth(100),
        5: pw.FixedColumnWidth(100),
      },
      children: <pw.TableRow>[
        pw.TableRow(
          // decoration: pw.BoxDecoration(
          //   color: convertColor(templateController.tableHeaderColor.value),
          // ),
          children: <pw.Widget>[
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 8,
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 8,
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 8,
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 8,
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "TOTAL : ",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 12,
                  color: PdfColors.black,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "1254.20",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 12,
                  color: PdfColors.black,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }

  pw.Table table() {
    final NewItemsController itemsController = NewItemsController();
    List<pw.TableRow> rows = [];

    for (var product in itemsController.products) {
      rows.add(
        pw.TableRow(
          children: <pw.Widget>[
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                product["name"],
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                  fontSize: 6,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                product["date"],
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                  fontSize: 6,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                product["unitprice"],
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                  fontSize: 6,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                product["quantity"],
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                  fontSize: 6,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                product["quantitytype"],
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                  fontSize: 6,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "${double.parse(product["quantity"]) * double.parse(product["unitprice"])}",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 6,
                ),
              ),
            ),
          ],
        ),
      );
    }

    return pw.Table(
      border: pw.TableBorder.all(color: PdfColors.grey.shade(0.10)),
      columnWidths: const <int, pw.TableColumnWidth>{
        0: pw.FixedColumnWidth(80),
        1: pw.FixedColumnWidth(80),
        2: pw.FixedColumnWidth(80),
        3: pw.FixedColumnWidth(60),
        4: pw.FixedColumnWidth(100),
        5: pw.FixedColumnWidth(50),
      },
      children: <pw.TableRow>[
        pw.TableRow(
          decoration: pw.BoxDecoration(
            color: PdfColors.green,
          ),
          children: <pw.Widget>[
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "Name",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 8,
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "Date",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 8,
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "Unit Price",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 8,
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "Qty",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 8,
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "Unit measure",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 8,
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            ),
            pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                "Total",
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(
                  fontSize: 8,
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
        ...rows,
      ],
    );
  }

  Future<void> savePdfFile(String fileName, Uint8List byteList) async {
    final output = await getTemporaryDirectory();
    var filePath = "${output.path}/$fileName.pdf";
    final file = File(filePath);
    await file.writeAsBytes(byteList);
    await OpenFile.open(filePath);
  }
}
